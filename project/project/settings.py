"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from django.core.exceptions import ImproperlyConfigured
from datetime import date, datetime, time
from pathlib import Path
import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
pth = '/home/jerrykim91/'
# pth ='Z:\\'


with open(pth + 'secret.json', 'r') as f:
    secret = json.loads(f.read())

def get_secret(setting, secret=secret):
    """
    비밀 변수를 가져오거나 명시적 예외를 반환한다.
    """
    try :
        return secret[setting]
    except KeyError:
        error_msg = "Set key '{0}' in secret.json".format(setting)
        raise ImproperlyConfigured(error_msg)


SECRET_KEY = get_secret('SECRET_KEY') # my-secret-key

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1','jerrykim91.pythonanywhere.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'disqus',
    'widget_tweaks',
    'fontawesome-free',
    'markdownx', # 마크 다운 
    'taggit.apps.TaggitAppConfig',
    'taggit_templatetags2',
    'django.contrib.sites',
    # app
    'blog',
    'linkList.apps.LinklistConfig',
    'photo.apps.PhotoConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }

        # mysql
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': get_secret("DATABASE_NAME"),
        'USER': get_secret("DATABASE_USER"),
        'PASSWORD': get_secret("DATABASE_PASSWORD"),
        'HOST': 'jerrykim91.mysql.pythonanywhere-services.com',
        'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
                 # 'sql_mode': 'traditional'
            },
    }

}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

# 만든 모델 명시
# AUTH_USER_MODEL = 'YourAppName.YourClassName'
# AUTH_USER_MODEL = "ToyMain.join"

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        #  'OPTION': {'user_attributes': ('username', 'name')},
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ko-kr'
# LANGUAGE_CODE = 'en'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Seoul'

USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL  = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

# MEDIA_URL = '/files/' # 업로드 할 경로
# MEDIA_ROOT = os.path.join(BASE_DIR, 'files')

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)


# LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

# MEDIA
MEDIA_URL = '/media/'
MEDIA_ROOT= [BASE_DIR / 'media']
MARKDOWNX_MEDIA_PATH = datetime.now().strftime('markdownx/%Y/%m/%d')

# TAG
TAGGIT_CASE_INSENSITIVE= True
TAGGIT_LIMIT = 50

# 뎃글
DISQUS_WEBSITE_SHORTNAME = "http-jerrykim91-pythonanywhere-com"
DISQUS_SHORTNAME = "http-jerrykim91-pythonanywhere-com"
DISQUS_MY_DOMAIN = 'https://jerrykim91.pythonanywhere.com/'

SITE_ID = 1

# 마크다운
MARKDOWNX_MARKDOWN_EXTENSIONS = [
    'markdown.extensions.extra', # 각주 
    'markdown.extensions.toc', # 테이블 컨텐츠
    'markdown.extensions.codehilite', # 문법 하이라이팅 
    'markdown.extensions.fenced_code', # 코드블락
]

MARKDOWNX_MARKDOWN_EXTENSION_CONFIGS = {
    'markdown.extensions.codehilite': {
        'linenums': True,
        'use_pygments': True,
        'noclasses': True
    }
}